#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Bu kod araç tarafından oluşturuldu.
//     Çalışma Zamanı Sürümü:4.0.30319.42000
//
//     Bu dosyada yapılacak değişiklikler yanlış davranışa neden olabilir ve
//     kod yeniden oluşturulursa kaybolur.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FUELSTATION
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GASSTATION")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCarBrand(CarBrand instance);
    partial void UpdateCarBrand(CarBrand instance);
    partial void DeleteCarBrand(CarBrand instance);
    partial void InsertCarModel(CarModel instance);
    partial void UpdateCarModel(CarModel instance);
    partial void DeleteCarModel(CarModel instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertDistrict(District instance);
    partial void UpdateDistrict(District instance);
    partial void DeleteDistrict(District instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertUSERS(USERS instance);
    partial void UpdateUSERS(USERS instance);
    partial void DeleteUSERS(USERS instance);
    partial void InsertUserCar(UserCar instance);
    partial void UpdateUserCar(UserCar instance);
    partial void DeleteUserCar(UserCar instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::FUELSTATION.Properties.Settings.Default.GASSTATIONConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CarBrand> CarBrand
		{
			get
			{
				return this.GetTable<CarBrand>();
			}
		}
		
		public System.Data.Linq.Table<CarModel> CarModel
		{
			get
			{
				return this.GetTable<CarModel>();
			}
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<District> District
		{
			get
			{
				return this.GetTable<District>();
			}
		}
		
		public System.Data.Linq.Table<Department> Department
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<USERS> USERS
		{
			get
			{
				return this.GetTable<USERS>();
			}
		}
		
		public System.Data.Linq.Table<UserCar> UserCar
		{
			get
			{
				return this.GetTable<UserCar>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBrand")]
	public partial class CarBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BrandID;
		
		private string _BrandName;
		
		private EntitySet<USERS> _USERS;
		
		private EntitySet<UserCar> _UserCar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrandIDChanging(int value);
    partial void OnBrandIDChanged();
    partial void OnBrandNameChanging(string value);
    partial void OnBrandNameChanged();
    #endregion
		
		public CarBrand()
		{
			this._USERS = new EntitySet<USERS>(new Action<USERS>(this.attach_USERS), new Action<USERS>(this.detach_USERS));
			this._UserCar = new EntitySet<UserCar>(new Action<UserCar>(this.attach_UserCar), new Action<UserCar>(this.detach_UserCar));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string BrandName
		{
			get
			{
				return this._BrandName;
			}
			set
			{
				if ((this._BrandName != value))
				{
					this.OnBrandNameChanging(value);
					this.SendPropertyChanging();
					this._BrandName = value;
					this.SendPropertyChanged("BrandName");
					this.OnBrandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_USERS", Storage="_USERS", ThisKey="BrandID", OtherKey="BrandID")]
		public EntitySet<USERS> USERS
		{
			get
			{
				return this._USERS;
			}
			set
			{
				this._USERS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_UserCar", Storage="_UserCar", ThisKey="BrandID", OtherKey="BrandID")]
		public EntitySet<UserCar> UserCar
		{
			get
			{
				return this._UserCar;
			}
			set
			{
				this._UserCar.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = this;
		}
		
		private void detach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = null;
		}
		
		private void attach_UserCar(UserCar entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = this;
		}
		
		private void detach_UserCar(UserCar entity)
		{
			this.SendPropertyChanging();
			entity.CarBrand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarModel")]
	public partial class CarModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ModelID;
		
		private int _BrandID;
		
		private string _ModelName;
		
		private EntitySet<USERS> _USERS;
		
		private EntitySet<UserCar> _UserCar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModelIDChanging(int value);
    partial void OnModelIDChanged();
    partial void OnBrandIDChanging(int value);
    partial void OnBrandIDChanged();
    partial void OnModelNameChanging(string value);
    partial void OnModelNameChanged();
    #endregion
		
		public CarModel()
		{
			this._USERS = new EntitySet<USERS>(new Action<USERS>(this.attach_USERS), new Action<USERS>(this.detach_USERS));
			this._UserCar = new EntitySet<UserCar>(new Action<UserCar>(this.attach_UserCar), new Action<UserCar>(this.detach_UserCar));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandID", DbType="Int NOT NULL")]
		public int BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ModelName
		{
			get
			{
				return this._ModelName;
			}
			set
			{
				if ((this._ModelName != value))
				{
					this.OnModelNameChanging(value);
					this.SendPropertyChanging();
					this._ModelName = value;
					this.SendPropertyChanged("ModelName");
					this.OnModelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_USERS", Storage="_USERS", ThisKey="ModelID", OtherKey="ModelID")]
		public EntitySet<USERS> USERS
		{
			get
			{
				return this._USERS;
			}
			set
			{
				this._USERS.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_UserCar", Storage="_UserCar", ThisKey="ModelID", OtherKey="ModelID")]
		public EntitySet<UserCar> UserCar
		{
			get
			{
				return this._UserCar;
			}
			set
			{
				this._UserCar.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = this;
		}
		
		private void detach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = null;
		}
		
		private void attach_UserCar(UserCar entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = this;
		}
		
		private void detach_UserCar(UserCar entity)
		{
			this.SendPropertyChanging();
			entity.CarModel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _CityName;
		
		private EntitySet<USERS> _USERS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    #endregion
		
		public City()
		{
			this._USERS = new EntitySet<USERS>(new Action<USERS>(this.attach_USERS), new Action<USERS>(this.detach_USERS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(255)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_USERS", Storage="_USERS", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<USERS> USERS
		{
			get
			{
				return this._USERS;
			}
			set
			{
				this._USERS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.District")]
	public partial class District : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DistrictID;
		
		private System.Nullable<int> _CityID;
		
		private string _DistrictName;
		
		private EntitySet<USERS> _USERS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictIDChanging(int value);
    partial void OnDistrictIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnDistrictNameChanging(string value);
    partial void OnDistrictNameChanged();
    #endregion
		
		public District()
		{
			this._USERS = new EntitySet<USERS>(new Action<USERS>(this.attach_USERS), new Action<USERS>(this.detach_USERS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DistrictName
		{
			get
			{
				return this._DistrictName;
			}
			set
			{
				if ((this._DistrictName != value))
				{
					this.OnDistrictNameChanging(value);
					this.SendPropertyChanging();
					this._DistrictName = value;
					this.SendPropertyChanged("DistrictName");
					this.OnDistrictNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_USERS", Storage="_USERS", ThisKey="DistrictID", OtherKey="DistrictID")]
		public EntitySet<USERS> USERS
		{
			get
			{
				return this._USERS;
			}
			set
			{
				this._USERS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.District = this;
		}
		
		private void detach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.District = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepID;
		
		private string _DepName;
		
		private EntitySet<USERS> _USERS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepIDChanging(int value);
    partial void OnDepIDChanged();
    partial void OnDepNameChanging(string value);
    partial void OnDepNameChanged();
    #endregion
		
		public Department()
		{
			this._USERS = new EntitySet<USERS>(new Action<USERS>(this.attach_USERS), new Action<USERS>(this.detach_USERS));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string DepName
		{
			get
			{
				return this._DepName;
			}
			set
			{
				if ((this._DepName != value))
				{
					this.OnDepNameChanging(value);
					this.SendPropertyChanging();
					this._DepName = value;
					this.SendPropertyChanged("DepName");
					this.OnDepNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_USERS", Storage="_USERS", ThisKey="DepID", OtherKey="DepID")]
		public EntitySet<USERS> USERS
		{
			get
			{
				return this._USERS;
			}
			set
			{
				this._USERS.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_USERS(USERS entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERS")]
	public partial class USERS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UId;
		
		private string _StationCode;
		
		private string _PersonNumber;
		
		private string _LPN;
		
		private string _Name;
		
		private string _SurName;
		
		private string _Password;
		
		private string _Email;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _Birthday;
		
		private System.Nullable<int> _UAP;
		
		private System.Nullable<int> _DepID;
		
		private System.Nullable<int> _FuelTypeID;
		
		private System.Nullable<int> _USID;
		
		private System.Nullable<int> _BrandID;
		
		private System.Nullable<int> _ModelID;
		
		private System.Nullable<int> _CityID;
		
		private System.Nullable<int> _DistrictID;
		
		private EntityRef<CarBrand> _CarBrand;
		
		private EntityRef<City> _City;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<District> _District;
		
		private EntityRef<CarModel> _CarModel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIdChanging(int value);
    partial void OnUIdChanged();
    partial void OnStationCodeChanging(string value);
    partial void OnStationCodeChanged();
    partial void OnPersonNumberChanging(string value);
    partial void OnPersonNumberChanged();
    partial void OnLPNChanging(string value);
    partial void OnLPNChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurNameChanging(string value);
    partial void OnSurNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnUAPChanging(System.Nullable<int> value);
    partial void OnUAPChanged();
    partial void OnDepIDChanging(System.Nullable<int> value);
    partial void OnDepIDChanged();
    partial void OnFuelTypeIDChanging(System.Nullable<int> value);
    partial void OnFuelTypeIDChanged();
    partial void OnUSIDChanging(System.Nullable<int> value);
    partial void OnUSIDChanged();
    partial void OnBrandIDChanging(System.Nullable<int> value);
    partial void OnBrandIDChanged();
    partial void OnModelIDChanging(System.Nullable<int> value);
    partial void OnModelIDChanged();
    partial void OnCityIDChanging(System.Nullable<int> value);
    partial void OnCityIDChanged();
    partial void OnDistrictIDChanging(System.Nullable<int> value);
    partial void OnDistrictIDChanged();
    #endregion
		
		public USERS()
		{
			this._CarBrand = default(EntityRef<CarBrand>);
			this._City = default(EntityRef<City>);
			this._Department = default(EntityRef<Department>);
			this._District = default(EntityRef<District>);
			this._CarModel = default(EntityRef<CarModel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UId
		{
			get
			{
				return this._UId;
			}
			set
			{
				if ((this._UId != value))
				{
					this.OnUIdChanging(value);
					this.SendPropertyChanging();
					this._UId = value;
					this.SendPropertyChanged("UId");
					this.OnUIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationCode", DbType="Char(10)")]
		public string StationCode
		{
			get
			{
				return this._StationCode;
			}
			set
			{
				if ((this._StationCode != value))
				{
					this.OnStationCodeChanging(value);
					this.SendPropertyChanging();
					this._StationCode = value;
					this.SendPropertyChanged("StationCode");
					this.OnStationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonNumber", DbType="Char(10)")]
		public string PersonNumber
		{
			get
			{
				return this._PersonNumber;
			}
			set
			{
				if ((this._PersonNumber != value))
				{
					this.OnPersonNumberChanging(value);
					this.SendPropertyChanging();
					this._PersonNumber = value;
					this.SendPropertyChanged("PersonNumber");
					this.OnPersonNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LPN", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string LPN
		{
			get
			{
				return this._LPN;
			}
			set
			{
				if ((this._LPN != value))
				{
					this.OnLPNChanging(value);
					this.SendPropertyChanging();
					this._LPN = value;
					this.SendPropertyChanged("LPN");
					this.OnLPNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurName", DbType="NVarChar(50)")]
		public string SurName
		{
			get
			{
				return this._SurName;
			}
			set
			{
				if ((this._SurName != value))
				{
					this.OnSurNameChanging(value);
					this.SendPropertyChanging();
					this._SurName = value;
					this.SendPropertyChanged("SurName");
					this.OnSurNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="Char(11)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UAP", DbType="Int")]
		public System.Nullable<int> UAP
		{
			get
			{
				return this._UAP;
			}
			set
			{
				if ((this._UAP != value))
				{
					this.OnUAPChanging(value);
					this.SendPropertyChanging();
					this._UAP = value;
					this.SendPropertyChanged("UAP");
					this.OnUAPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepID", DbType="Int")]
		public System.Nullable<int> DepID
		{
			get
			{
				return this._DepID;
			}
			set
			{
				if ((this._DepID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepIDChanging(value);
					this.SendPropertyChanging();
					this._DepID = value;
					this.SendPropertyChanged("DepID");
					this.OnDepIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelTypeID", DbType="Int")]
		public System.Nullable<int> FuelTypeID
		{
			get
			{
				return this._FuelTypeID;
			}
			set
			{
				if ((this._FuelTypeID != value))
				{
					this.OnFuelTypeIDChanging(value);
					this.SendPropertyChanging();
					this._FuelTypeID = value;
					this.SendPropertyChanged("FuelTypeID");
					this.OnFuelTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USID", DbType="Int")]
		public System.Nullable<int> USID
		{
			get
			{
				return this._USID;
			}
			set
			{
				if ((this._USID != value))
				{
					this.OnUSIDChanging(value);
					this.SendPropertyChanging();
					this._USID = value;
					this.SendPropertyChanged("USID");
					this.OnUSIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandID", DbType="Int")]
		public System.Nullable<int> BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					if (this._CarBrand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int")]
		public System.Nullable<int> ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					if (this._CarModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int")]
		public System.Nullable<int> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictID", DbType="Int")]
		public System.Nullable<int> DistrictID
		{
			get
			{
				return this._DistrictID;
			}
			set
			{
				if ((this._DistrictID != value))
				{
					if (this._District.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistrictIDChanging(value);
					this.SendPropertyChanging();
					this._DistrictID = value;
					this.SendPropertyChanged("DistrictID");
					this.OnDistrictIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_USERS", Storage="_CarBrand", ThisKey="BrandID", OtherKey="BrandID", IsForeignKey=true)]
		public CarBrand CarBrand
		{
			get
			{
				return this._CarBrand.Entity;
			}
			set
			{
				CarBrand previousValue = this._CarBrand.Entity;
				if (((previousValue != value) 
							|| (this._CarBrand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBrand.Entity = null;
						previousValue.USERS.Remove(this);
					}
					this._CarBrand.Entity = value;
					if ((value != null))
					{
						value.USERS.Add(this);
						this._BrandID = value.BrandID;
					}
					else
					{
						this._BrandID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarBrand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_USERS", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.USERS.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.USERS.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_USERS", Storage="_Department", ThisKey="DepID", OtherKey="DepID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.USERS.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.USERS.Add(this);
						this._DepID = value.DepID;
					}
					else
					{
						this._DepID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="District_USERS", Storage="_District", ThisKey="DistrictID", OtherKey="DistrictID", IsForeignKey=true)]
		public District District
		{
			get
			{
				return this._District.Entity;
			}
			set
			{
				District previousValue = this._District.Entity;
				if (((previousValue != value) 
							|| (this._District.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._District.Entity = null;
						previousValue.USERS.Remove(this);
					}
					this._District.Entity = value;
					if ((value != null))
					{
						value.USERS.Add(this);
						this._DistrictID = value.DistrictID;
					}
					else
					{
						this._DistrictID = default(Nullable<int>);
					}
					this.SendPropertyChanged("District");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_USERS", Storage="_CarModel", ThisKey="ModelID", OtherKey="ModelID", IsForeignKey=true)]
		public CarModel CarModel
		{
			get
			{
				return this._CarModel.Entity;
			}
			set
			{
				CarModel previousValue = this._CarModel.Entity;
				if (((previousValue != value) 
							|| (this._CarModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarModel.Entity = null;
						previousValue.USERS.Remove(this);
					}
					this._CarModel.Entity = value;
					if ((value != null))
					{
						value.USERS.Add(this);
						this._ModelID = value.ModelID;
					}
					else
					{
						this._ModelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarModel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCar")]
	public partial class UserCar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UId;
		
		private string _Email;
		
		private string _LPN;
		
		private System.Nullable<int> _BrandID;
		
		private System.Nullable<int> _ModelID;
		
		private EntityRef<CarBrand> _CarBrand;
		
		private EntityRef<CarModel> _CarModel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIdChanging(int value);
    partial void OnUIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLPNChanging(string value);
    partial void OnLPNChanged();
    partial void OnBrandIDChanging(System.Nullable<int> value);
    partial void OnBrandIDChanged();
    partial void OnModelIDChanging(System.Nullable<int> value);
    partial void OnModelIDChanged();
    #endregion
		
		public UserCar()
		{
			this._CarBrand = default(EntityRef<CarBrand>);
			this._CarModel = default(EntityRef<CarModel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UId
		{
			get
			{
				return this._UId;
			}
			set
			{
				if ((this._UId != value))
				{
					this.OnUIdChanging(value);
					this.SendPropertyChanging();
					this._UId = value;
					this.SendPropertyChanged("UId");
					this.OnUIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LPN", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string LPN
		{
			get
			{
				return this._LPN;
			}
			set
			{
				if ((this._LPN != value))
				{
					this.OnLPNChanging(value);
					this.SendPropertyChanging();
					this._LPN = value;
					this.SendPropertyChanged("LPN");
					this.OnLPNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandID", DbType="Int")]
		public System.Nullable<int> BrandID
		{
			get
			{
				return this._BrandID;
			}
			set
			{
				if ((this._BrandID != value))
				{
					if (this._CarBrand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrandIDChanging(value);
					this.SendPropertyChanging();
					this._BrandID = value;
					this.SendPropertyChanged("BrandID");
					this.OnBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelID", DbType="Int")]
		public System.Nullable<int> ModelID
		{
			get
			{
				return this._ModelID;
			}
			set
			{
				if ((this._ModelID != value))
				{
					if (this._CarModel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelIDChanging(value);
					this.SendPropertyChanging();
					this._ModelID = value;
					this.SendPropertyChanged("ModelID");
					this.OnModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_UserCar", Storage="_CarBrand", ThisKey="BrandID", OtherKey="BrandID", IsForeignKey=true)]
		public CarBrand CarBrand
		{
			get
			{
				return this._CarBrand.Entity;
			}
			set
			{
				CarBrand previousValue = this._CarBrand.Entity;
				if (((previousValue != value) 
							|| (this._CarBrand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBrand.Entity = null;
						previousValue.UserCar.Remove(this);
					}
					this._CarBrand.Entity = value;
					if ((value != null))
					{
						value.UserCar.Add(this);
						this._BrandID = value.BrandID;
					}
					else
					{
						this._BrandID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarBrand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_UserCar", Storage="_CarModel", ThisKey="ModelID", OtherKey="ModelID", IsForeignKey=true)]
		public CarModel CarModel
		{
			get
			{
				return this._CarModel.Entity;
			}
			set
			{
				CarModel previousValue = this._CarModel.Entity;
				if (((previousValue != value) 
							|| (this._CarModel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarModel.Entity = null;
						previousValue.UserCar.Remove(this);
					}
					this._CarModel.Entity = value;
					if ((value != null))
					{
						value.UserCar.Add(this);
						this._ModelID = value.ModelID;
					}
					else
					{
						this._ModelID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarModel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
